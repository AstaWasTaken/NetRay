"use strict";(self.webpackChunknet_ray_docs=self.webpackChunknet_ray_docs||[]).push([[873],{8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>s});var i=t(6540);const r={},a=i.createContext(r);function o(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(a.Provider,{value:n},e.children)}},8730:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"configuration","title":"Configuration","description":"Configure NetRay\'s behavior for debugging, performance, and specific features.","source":"@site/docs/configuration.md","sourceDirName":".","slug":"/configuration","permalink":"/NetRay/docs/configuration","draft":false,"unlisted":false,"editUrl":"https://github.com/AstaWasTaken/NetRay/docs/configuration.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"title":"Configuration"},"sidebar":"docsSidebar","previous":{"title":"Getting Started","permalink":"/NetRay/docs/getting-started"},"next":{"title":"Core Concepts","permalink":"/NetRay/docs/category/core-concepts"}}');var r=t(4848),a=t(8453);const o={sidebar_position:3,title:"Configuration"},s="Configuration",c={},l=[{value:"Global Debug Monitoring",id:"global-debug-monitoring",level:2},{value:"Enable standard monitoring (e.g., in a shared initialization script or both client/server main scripts)",id:"enable-standard-monitoring-eg-in-a-shared-initialization-script-or-both-clientserver-main-scripts",level:3},{value:"Connect listeners to see the output (see Debugging guide for examples)",id:"connect-listeners-to-see-the-output-see-debugging-guide-for-examples",level:3},{value:"Dynamic Sender (Internal Options)",id:"dynamic-sender-internal-options",level:2},{value:"Event and Request Options",id:"event-and-request-options",level:2},{value:"Example Registration with Options",id:"example-registration-with-options",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"configuration",children:"Configuration"})}),"\n",(0,r.jsx)(n.p,{children:"Configure NetRay's behavior for debugging, performance, and specific features."}),"\n",(0,r.jsx)(n.h2,{id:"global-debug-monitoring",children:"Global Debug Monitoring"}),"\n",(0,r.jsx)(n.p,{children:"Enable verbose logging of internal NetRay operations by enabling debug monitoring. This helps track event flow and identify issues."}),"\n",(0,r.jsx)(n.h3,{id:"enable-standard-monitoring-eg-in-a-shared-initialization-script-or-both-clientserver-main-scripts",children:"Enable standard monitoring (e.g., in a shared initialization script or both client/server main scripts)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"NetRay.Debug.EnableMonitoring({ enabled = true })\n"})}),"\n",(0,r.jsx)(n.h3,{id:"connect-listeners-to-see-the-output-see-debugging-guide-for-examples",children:"Connect listeners to see the output (see Debugging guide for examples)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"NetRay.Debug.GlobalEvent:Connect(function(context, signalName, ...)\r\n    print(`[NetRay Debug - ${context}] ${signalName}:`, ...)\r\nend)\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["Enabling monitoring makes NetRay fire its ",(0,r.jsx)(n.code,{children:"Debug"})," signals. You must still ",(0,r.jsx)(n.code,{children:":Connect()"})," to these signals (",(0,r.jsx)(n.code,{children:"NetRay.Debug.GlobalEvent"}),", ",(0,r.jsx)(n.code,{children:"NetRay.Debug.Error"}),") to observe the logs."]})}),"\n",(0,r.jsx)(n.h2,{id:"dynamic-sender-internal-options",children:"Dynamic Sender (Internal Options)"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"DynamicSender"})," module manages automatic optimizations like batching and compression. Its configuration parameters are currently located directly within the ",(0,r.jsx)(n.code,{children:"Shared/DynamicSender.lua"})," script file."]}),"\n",(0,r.jsxs)(n.p,{children:["To adjust these settings, you would need to modify the ",(0,r.jsx)(n.code,{children:"NetRaySender.Config"})," table inside that file."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"-- Example configuration for NetRaySender\r\nNetRaySender.Config = {\r\n    BatchingEnabled = true,       -- Enable/disable automatic event batching\r\n    BatchInterval = 0.03,         -- Time (seconds) between sending queued batches\r\n    MaxBatchSize = 15,            -- Max events in a batch before forced sending\r\n    MaxBatchWait = 0.05,          -- Max time (seconds) an event waits before batch is sent\r\n    RetryAttempts = 3,            -- Number of times to retry failed sends\r\n    RetryDelay = 0.5,             -- Delay (seconds) between retry attempts\r\n    CompressionEnabled = true      -- Enable/disable data compression\r\n}\n"})}),"\n",(0,r.jsx)(n.admonition,{title:"Modifying Internals",type:"danger",children:(0,r.jsx)(n.p,{children:"Directly editing library files makes updating NetRay harder later. A future version might expose these configurations through a top-level API."})}),"\n",(0,r.jsx)(n.h2,{id:"event-and-request-options",children:"Event and Request Options"}),"\n",(0,r.jsxs)(n.p,{children:["Most configurations like type safety schemas, compression hints, priorities, and circuit breakers are specified directly when you register an Event or Request using ",(0,r.jsx)(n.code,{children:"NetRay:RegisterEvent"})," or ",(0,r.jsx)(n.code,{children:"NetRay:RegisterRequestEvent"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"example-registration-with-options",children:"Example Registration with Options"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local playerUpdateEvent = NetRay:RegisterEvent("PlayerPositionUpdate", {\r\n-- Feature Configurations:\r\n    priority = NetRay.Priority.HIGH,           -- Process quickly on client\r\n    batchable = true,                          -- Allow this event to be batched (default)\r\n    compression = true,                        -- Hint to try compressing large payloads\r\n    typeDefinition = {                         -- Enforce data structure\r\n        position = "Vector3",\r\n        rotationY = "number",\r\n        state = "string|nil",\r\n    },\r\n    circuitBreaker = {                         -- Configure fault tolerance\r\n        failureThreshold = 5,\r\n        resetTimeout = 30,\r\n    },\r\n    -- Note: rateLimit is part of ServerManager options, not RegisterEvent directly\r\n    -- Apply rate limits using middleware or modify ServerManager initialization if needed.\r\n})\r\n\r\n-- Example: Request with circuit breaker\r\nlocal apiRequest = NetRay:RegisterRequestEvent("FetchPlayerData", {\r\n    circuitBreaker = {\r\n        failureThreshold = 3,\r\n        resetTimeout = 30\r\n    }\r\n})\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Refer to the guides on ",(0,r.jsx)(n.a,{href:"/NetRay/docs/core-concepts/events",children:"Events"}),", ",(0,r.jsx)(n.a,{href:"/NetRay/docs/core-concepts/requests",children:"Requests"}),", and the specific ",(0,r.jsx)(n.a,{href:"/NetRay/docs/advanced-features/middleware",children:"Advanced Features"})," for details on their respective options."]})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);