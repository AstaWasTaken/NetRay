"use strict";(self.webpackChunknet_ray_docs=self.webpackChunknet_ray_docs||[]).push([[317],{2987:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"docsSidebar":[{"type":"link","label":"Introduction","href":"/NetRay/docs/intro","docId":"intro","unlisted":false},{"type":"link","label":"Getting Started","href":"/NetRay/docs/getting-started","docId":"getting-started","unlisted":false},{"type":"link","label":"Configuration","href":"/NetRay/docs/configuration","docId":"configuration","unlisted":false},{"type":"category","label":"Core Concepts","items":[{"type":"link","label":"Events (Fire-and-Forget)","href":"/NetRay/docs/core-concepts/events","docId":"core-concepts/events","unlisted":false},{"type":"link","label":"Requests (Request/Response)","href":"/NetRay/docs/core-concepts/requests","docId":"core-concepts/requests","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/NetRay/docs/category/core-concepts"},{"type":"category","label":"Advanced Features","items":[{"type":"link","label":"Middleware","href":"/NetRay/docs/advanced-features/middleware","docId":"advanced-features/middleware","unlisted":false},{"type":"link","label":"Type Checking","href":"/NetRay/docs/advanced-features/type-checking","docId":"advanced-features/type-checking","unlisted":false},{"type":"link","label":"Circuit Breakers","href":"/NetRay/docs/advanced-features/circuit-breakers","docId":"advanced-features/circuit-breakers","unlisted":false},{"type":"link","label":"Event Priorities","href":"/NetRay/docs/advanced-features/priorities","docId":"advanced-features/priorities","unlisted":false},{"type":"link","label":"Optimizations (Batching & Compression)","href":"/NetRay/docs/advanced-features/optimizations","docId":"advanced-features/optimizations","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/NetRay/docs/category/advanced-features"},{"type":"link","label":"Debugging & Monitoring","href":"/NetRay/docs/debugging","docId":"debugging","unlisted":false},{"type":"category","label":"API Reference","items":[{"type":"link","label":"NetRay Module","href":"/NetRay/docs/api-reference/netray","docId":"api-reference/netray","unlisted":false},{"type":"link","label":"API Reference - ServerEvent","href":"/NetRay/docs/api-reference/serverevent","docId":"api-reference/serverevent","unlisted":false},{"type":"link","label":"API Reference - ClientEvent","href":"/NetRay/docs/api-reference/clientevent","docId":"api-reference/clientevent","unlisted":false},{"type":"link","label":"API Reference - RequestServer","href":"/NetRay/docs/api-reference/requestserver","docId":"api-reference/requestserver","unlisted":false},{"type":"link","label":"API Reference - RequestClient","href":"/NetRay/docs/api-reference/requestclient","docId":"api-reference/requestclient","unlisted":false},{"type":"link","label":"API Reference - CircuitBreaker","href":"/NetRay/docs/api-reference/circuitbreaker","docId":"api-reference/circuitbreaker","unlisted":false}],"collapsed":true,"collapsible":true}]},"docs":{"advanced-features/circuit-breakers":{"id":"advanced-features/circuit-breakers","title":"Circuit Breakers","description":"The Circuit Breaker pattern is a crucial technique for building resilient networked systems. It prevents an application from repeatedly trying to execute an operation that\'s likely to fail, especially due to downstream service unavailability or errors. NetRay integrates Circuit Breakers to automatically manage the health of event/request endpoints.","sidebar":"docsSidebar"},"advanced-features/middleware":{"id":"advanced-features/middleware","title":"Middleware","description":"Middleware provides a powerful way to intercept and process network data as it flows through NetRay. You can use it for logging, validation, rate limiting, data transformation, or even blocking events/requests based on custom logic.","sidebar":"docsSidebar"},"advanced-features/optimizations":{"id":"advanced-features/optimizations","title":"Optimizations (Batching & Compression)","description":"NetRay incorporates automatic optimizations to improve network efficiency, primarily managed by the internal DynamicSender module.","sidebar":"docsSidebar"},"advanced-features/priorities":{"id":"advanced-features/priorities","title":"Event Priorities","description":"NetRay allows you to assign priorities to events (RegisterEvent), influencing the order in which they are processed on the receiving client. This helps ensure that critical updates are handled promptly, even under high network load, while less important events (like background logging) can be deferred slightly.","sidebar":"docsSidebar"},"advanced-features/type-checking":{"id":"advanced-features/type-checking","title":"Type Checking","description":"NetRay includes an optional, built-in type checking system to help ensure the integrity of data sent over the network. By defining the expected structure and types for your events and requests, NetRay can automatically validate incoming payloads, catching potential errors early.","sidebar":"docsSidebar"},"api-reference/circuitbreaker":{"id":"api-reference/circuitbreaker","title":"API Reference - CircuitBreaker","description":"Provides fault tolerance for network operations associated with specific NetRay Events or Requests. Obtained via NetRay:GetCircuitBreaker(eventName).","sidebar":"docsSidebar"},"api-reference/clientevent":{"id":"api-reference/clientevent","title":"API Reference - ClientEvent","description":"Returned by NetRayRegisterEvent on the client. Handles client-side logic for unidirectional events.","sidebar":"docsSidebar"},"api-reference/index":{"id":"api-reference/index","title":"API Overview","description":"This section provides detailed documentation for the primary classes, methods, and options available in the NetRay library."},"api-reference/netray":{"id":"api-reference/netray","title":"NetRay Module","description":"The main NetRay module serves as the entry point for accessing all library features.","sidebar":"docsSidebar"},"api-reference/requestclient":{"id":"api-reference/requestclient","title":"API Reference - RequestClient","description":"Returned by NetRay:RegisterRequestEvent on the client. Handles the client-side logic for request/response communication, primarily for making requests to the server, but also for handling requests initiated by the server. Uses Promises for asynchronous results.","sidebar":"docsSidebar"},"api-reference/requestserver":{"id":"api-reference/requestserver","title":"API Reference - RequestServer","description":"Returned by NetRay:RegisterRequestEvent on the server. Handles the server-side logic for request/response communication initiated by clients (or rarely, by the server towards a client).","sidebar":"docsSidebar"},"api-reference/serverevent":{"id":"api-reference/serverevent","title":"API Reference - ServerEvent","description":"Returned by NetRay:RegisterEvent on the server. Handles server-side logic for unidirectional events.","sidebar":"docsSidebar"},"configuration":{"id":"configuration","title":"Configuration","description":"Configure NetRay\'s behavior for debugging, performance, and specific features.","sidebar":"docsSidebar"},"core-concepts/events":{"id":"core-concepts/events","title":"Events (Fire-and-Forget)","description":"Events in NetRay are unidirectional, \\"fire-and-forget\\" messages, analogous to Roblox\'s RemoteEvent. Use them to broadcast information or trigger actions where an immediate response isn\'t required.","sidebar":"docsSidebar"},"core-concepts/requests":{"id":"core-concepts/requests","title":"Requests (Request/Response)","description":"Requests in NetRay handle two-way communication where a response is expected, replacing the need for RemoteFunction. They utilize Promises for cleaner asynchronous code flow.","sidebar":"docsSidebar"},"debugging":{"id":"debugging","title":"Debugging & Monitoring","description":"NetRay provides built-in signals and utilities to help you understand its internal behavior, track down issues, and monitor performance.","sidebar":"docsSidebar"},"getting-started":{"id":"getting-started","title":"Getting Started","description":"This guide walks you through the basic steps to get NetRay up and running in your Roblox project.","sidebar":"docsSidebar"},"intro":{"id":"intro","title":"Introduction","description":"NetRay is a modern, high-performance networking library for Roblox, designed to enhance developer experience and runtime efficiency. It builds upon Roblox\'s core networking features, offering optimizations, increased reliability, and a more structured approach to client-server communication.","sidebar":"docsSidebar"}}}}')}}]);