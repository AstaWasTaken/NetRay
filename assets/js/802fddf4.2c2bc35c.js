"use strict";(self.webpackChunknet_ray_docs=self.webpackChunknet_ray_docs||[]).push([[673],{8449:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"api-reference/requestserver","title":"API Reference - RequestServer","description":"Returned by NetRay:RegisterRequestEvent on the server. Handles the server-side logic for request/response communication initiated by clients (or rarely, by the server towards a client).","source":"@site/docs/api-reference/requestserver.md","sourceDirName":"api-reference","slug":"/api-reference/requestserver","permalink":"/NetRay/docs/api-reference/requestserver","draft":false,"unlisted":false,"editUrl":"https://github.com/AstaWasTaken/NetRay/docs/api-reference/requestserver.md","tags":[],"version":"current","frontMatter":{"title":"API Reference - RequestServer"},"sidebar":"docsSidebar","previous":{"title":"API Reference - ClientEvent","permalink":"/NetRay/docs/api-reference/clientevent"},"next":{"title":"API Reference - RequestClient","permalink":"/NetRay/docs/api-reference/requestclient"}}');var s=n(4848),i=n(8453);const a={title:"API Reference - RequestServer"},l="API: RequestServer",o={},c=[{value:"Methods",id:"methods",level:2},{value:"<code>:OnRequest(callback: function)</code>",id:"onrequestcallback-function",level:3},{value:"<code>:Request(player: Player, data: any): Promise</code>",id:"requestplayer-player-data-any-promise",level:3},{value:"Properties (Internal)",id:"properties-internal",level:2},{value:"Example of Server-Side Request Registration",id:"example-of-server-side-request-registration",level:3}];function d(e){const r={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"api-requestserver",children:"API: RequestServer"})}),"\n",(0,s.jsxs)(r.p,{children:["Returned by ",(0,s.jsx)(r.code,{children:"NetRay:RegisterRequestEvent"})," on the server. Handles the server-side logic for request/response communication initiated by clients (or rarely, by the server towards a client)."]}),"\n",(0,s.jsx)(r.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(r.h3,{id:"onrequestcallback-function",children:(0,s.jsx)(r.code,{children:":OnRequest(callback: function)"})}),"\n",(0,s.jsxs)(r.p,{children:["Registers the primary handler function that executes when a request is received ",(0,s.jsx)(r.em,{children:"from"})," a client for this endpoint. This function ",(0,s.jsx)(r.strong,{children:"must"})," return a value (the response) or ",(0,s.jsx)(r.code,{children:"error()"})," to reject the client's Promise."]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.code,{children:"callback(player: Player, data: any) -> response: any"})}),":","\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"player"}),": The ",(0,s.jsx)(r.code,{children:"Player"})," instance making the request."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"data"}),": The request payload sent by the client (validated against ",(0,s.jsx)(r.code,{children:"requestTypeDefinition"})," if provided)."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Return Value"}),": The data to send back as the response to the client. This value is validated against ",(0,s.jsx)(r.code,{children:"responseTypeDefinition"})," if provided. If the callback ",(0,s.jsx)(r.code,{children:"error()"}),"s, the client's Promise is rejected with the error message."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:"Example:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-lua",children:'local getDataRequest = NetRay:RegisterRequestEvent("GetPlayerData", {\r\n    responseTypeDefinition = { level = "number", xp = "number" }\r\n})\r\n\r\nlocal PlayerDataModule = require(game.ServerStorage.PlayerData)\r\n\r\ngetDataRequest:OnRequest(function(player, data)\r\n    -- \'data\' might be empty or contain specifics like {\'field\': \'level\'}\r\n    local userId = player.UserId\r\n    local level = PlayerDataModule:GetLevel(userId)\r\n    local xp = PlayerDataModule:GetXP(userId)\r\n\r\n    if level == nil or xp == nil then\r\n        error("Could not load player data for " .. player.Name) -- Rejects client Promise\r\n    end\r\n\r\n    return { level = level, xp = xp } -- Resolves client Promise\r\nend)\n'})}),"\n",(0,s.jsx)(r.h3,{id:"requestplayer-player-data-any-promise",children:(0,s.jsx)(r.code,{children:":Request(player: Player, data: any): Promise"})}),"\n",(0,s.jsxs)(r.p,{children:["(Less Common Usage) Initiates a request ",(0,s.jsx)(r.em,{children:"from"})," the server ",(0,s.jsx)(r.em,{children:"to"})," a specific client. The client must have registered the same request name and provided an ",(0,s.jsx)(r.code,{children:":OnRequest"})," handler."]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"player"}),": The target ",(0,s.jsx)(r.code,{children:"Player"})," instance to send the request to."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"data"}),": The data payload to send with the request (validated against the ",(0,s.jsx)(r.em,{children:"client's"})," ",(0,s.jsx)(r.code,{children:"requestTypeDefinition"})," if they defined one)."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Returns"}),": A ",(0,s.jsx)(r.code,{children:"Promise"})," that resolves with the client's response or rejects on error/timeout. The response is validated against ",(0,s.jsx)(r.em,{children:"this"})," (server's) ",(0,s.jsx)(r.code,{children:"responseTypeDefinition"}),"."]}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:"Example:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-lua",children:'local promptClientAction = NetRay:RegisterRequestEvent("PromptAction", {\r\n    responseTypeDefinition = { confirmed = "boolean" } -- Server expects boolean confirmation back\r\n})\r\n\r\nlocal function askPlayerToConfirm(player)\r\n    promptClientAction:Request(player, { prompt = "Accept Quest?" })\r\n        :andThen(function(response) -- Response from client handler\r\n            if response.confirmed then\r\n                print(player.Name, "accepted the quest.")\r\n                -- Grant quest\r\n            else\r\n                print(player.Name, "declined the quest.")\r\n            end\r\n        end)\r\n        :catch(function(err)\r\n            warn("Failed to get confirmation from", player.Name, ":", err)\r\n        end)\r\nend\n'})}),"\n",(0,s.jsx)(r.h2,{id:"properties-internal",children:"Properties (Internal)"}),"\n",(0,s.jsx)(r.p,{children:"Holds references to:"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"Name"}),": Request name string."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"Options"}),": Registration options."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"ServerManager"}),": Parent manager instance."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"RemoteFunction"}),": Underlying Roblox ",(0,s.jsx)(r.code,{children:"RemoteFunction"}),"."]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"example-of-server-side-request-registration",children:"Example of Server-Side Request Registration"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-lua",children:'-- Example of server-side request registration\r\nlocal getDataRequest = NetRay:RegisterRequestEvent("GetPlayerData", {\r\n    responseTypeDefinition = { level = "number", xp = "number" }\r\n})\r\n\r\nlocal PlayerDataModule = require(game.ServerStorage.PlayerData)\r\n\r\n-- Server-side handler\r\ngetDataRequest.OnServerInvoke = function(player)\r\n    local data = PlayerDataModule:GetData(player)\r\n    return {\r\n        level = data.level,\r\n        xp = data.xp\r\n    }\r\nend\n'})})]})}function h(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>l});var t=n(6540);const s={},i=t.createContext(s);function a(e){const r=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(i.Provider,{value:r},e.children)}}}]);