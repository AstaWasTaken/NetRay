"use strict";(self.webpackChunknet_ray_docs=self.webpackChunknet_ray_docs||[]).push([[44],{8069:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"api-reference/netray","title":"NetRay Module","description":"The main NetRay module serves as the entry point for accessing all library features.","source":"@site/docs/api-reference/netray.md","sourceDirName":"api-reference","slug":"/api-reference/netray","permalink":"/NetRay/docs/api-reference/netray","draft":false,"unlisted":false,"editUrl":"https://github.com/AstaWasTaken/NetRay/docs/api-reference/netray.md","tags":[],"version":"current","frontMatter":{"title":"NetRay Module"},"sidebar":"docsSidebar","previous":{"title":"API Reference"},"next":{"title":"API Reference - ServerEvent","permalink":"/NetRay/docs/api-reference/serverevent"}}');var t=r(4848),s=r(8453);const l={title:"NetRay Module"},c="API: NetRay Module",d={},a=[{value:"Properties",id:"properties",level:2},{value:"<code>NetRay.Version: string</code>",id:"netrayversion-string",level:3},{value:"<code>NetRay.Priority: table&lt;string, number&gt;</code>",id:"netraypriority-tablestring-number",level:3},{value:"<code>NetRay.Debug: table</code>",id:"netraydebug-table",level:3},{value:"Server-Only Properties",id:"server-only-properties",level:3},{value:"<code>NetRay.Server: ServerManager</code>",id:"netrayserver-servermanager",level:3},{value:"Client-Only Properties",id:"client-only-properties",level:3},{value:"<code>NetRay.Client: ClientManager</code>",id:"netrayclient-clientmanager",level:3},{value:"Shared Modules",id:"shared-modules",level:3},{value:"<code>NetRay.Utils: Utilities</code>",id:"netrayutils-utilities",level:3},{value:"<code>NetRay.Errors: Errors</code>",id:"netrayerrors-errors",level:3},{value:"<code>NetRay.Serializer: Serializer</code>",id:"netrayserializer-serializer",level:3},{value:"<code>NetRay.TypeChecker: TypeChecker</code>",id:"netraytypechecker-typechecker",level:3},{value:"Methods",id:"methods",level:2},{value:"<code>NetRay:RegisterEvent(eventName: string, options: table?): ServerEvent | ClientEvent</code>",id:"netrayregistereventeventname-string-options-table-serverevent--clientevent",level:3},{value:"<code>NetRay:RegisterRequestEvent(eventName: string, options: table?): RequestServer | RequestClient</code>",id:"netrayregisterrequesteventeventname-string-options-table-requestserver--requestclient",level:3},{value:"<code>NetRay:RegisterMiddleware(name: string, middlewareFn: function, priority: number?)</code>",id:"netrayregistermiddlewarename-string-middlewarefn-function-priority-number",level:3},{value:"<code>NetRay:GetCircuitBreaker(eventName: string): CircuitBreaker?</code>",id:"netraygetcircuitbreakereventname-string-circuitbreaker",level:3},{value:"<code>NetRay:GetEvent(eventName: string): ClientEvent</code>",id:"netraygeteventeventname-string-clientevent",level:3}];function o(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"api-netray-module",children:"API: NetRay Module"})}),"\n",(0,t.jsxs)(n.p,{children:["The main ",(0,t.jsx)(n.code,{children:"NetRay"})," module serves as the entry point for accessing all library features."]}),"\n",(0,t.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,t.jsx)(n.h3,{id:"netrayversion-string",children:(0,t.jsx)(n.code,{children:"NetRay.Version: string"})}),"\n",(0,t.jsxs)(n.p,{children:["Returns the current version string of the NetRay library (e.g., ",(0,t.jsx)(n.code,{children:'"1.0.0"'}),")."]}),"\n",(0,t.jsx)(n.h3,{id:"netraypriority-tablestring-number",children:(0,t.jsx)(n.code,{children:"NetRay.Priority: table<string, number>"})}),"\n",(0,t.jsx)(n.p,{children:"A table containing constants representing priority levels used for client-side event processing. Lower values mean higher priority."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"CRITICAL"}),": 0"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"HIGH"}),": 1"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"NORMAL"}),": 2 (Default)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"LOW"}),": 3"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"BACKGROUND"}),": 4"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"netraydebug-table",children:(0,t.jsx)(n.code,{children:"NetRay.Debug: table"})}),"\n",(0,t.jsx)(n.p,{children:"Contains signals and functions for debugging and monitoring."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Debug.GlobalEvent: SignalPlus"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Fires for various internal library events."}),"\n",(0,t.jsxs)(n.li,{children:["Args: ",(0,t.jsx)(n.code,{children:'(context: "Server" | "Client", signalName: string, ...)'})]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Debug.Error: SignalPlus"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Fires when internal errors are caught."}),"\n",(0,t.jsxs)(n.li,{children:["Args: ",(0,t.jsx)(n.code,{children:'(context: "Server" | "Client", source: string, ...)'})]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Debug.NetworkTraffic: SignalPlus"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(Currently Placeholder) Intended for network statistics."}),"\n",(0,t.jsxs)(n.li,{children:["Args: ",(0,t.jsx)(n.code,{children:"(stats: table)"})]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Debug.EnableMonitoring(options: { enabled: boolean }): boolean"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Enables or disables the firing of the ",(0,t.jsx)(n.code,{children:"GlobalEvent"})," and ",(0,t.jsx)(n.code,{children:"Error"})," debug signals. Returns the ",(0,t.jsx)(n.code,{children:"enabled"})," state."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"server-only-properties",children:"Server-Only Properties"}),"\n",(0,t.jsx)(n.h3,{id:"netrayserver-servermanager",children:(0,t.jsx)(n.code,{children:"NetRay.Server: ServerManager"})}),"\n",(0,t.jsx)(n.p,{children:"(Available only in a server context) Provides access to the server-side management instance. Internal use primarily."}),"\n",(0,t.jsx)(n.h3,{id:"client-only-properties",children:"Client-Only Properties"}),"\n",(0,t.jsx)(n.h3,{id:"netrayclient-clientmanager",children:(0,t.jsx)(n.code,{children:"NetRay.Client: ClientManager"})}),"\n",(0,t.jsx)(n.p,{children:"(Available only in a client context) Provides access to the client-side management instance. Internal use primarily."}),"\n",(0,t.jsx)(n.h3,{id:"shared-modules",children:"Shared Modules"}),"\n",(0,t.jsx)(n.h3,{id:"netrayutils-utilities",children:(0,t.jsx)(n.code,{children:"NetRay.Utils: Utilities"})}),"\n",(0,t.jsx)(n.h3,{id:"netrayerrors-errors",children:(0,t.jsx)(n.code,{children:"NetRay.Errors: Errors"})}),"\n",(0,t.jsx)(n.h3,{id:"netrayserializer-serializer",children:(0,t.jsx)(n.code,{children:"NetRay.Serializer: Serializer"})}),"\n",(0,t.jsx)(n.h3,{id:"netraytypechecker-typechecker",children:(0,t.jsx)(n.code,{children:"NetRay.TypeChecker: TypeChecker"})}),"\n",(0,t.jsx)(n.p,{children:"Provides access to shared internal utility modules. Their direct use might change between versions; rely on the main NetRay API where possible."}),"\n",(0,t.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,t.jsx)(n.h3,{id:"netrayregistereventeventname-string-options-table-serverevent--clientevent",children:(0,t.jsx)(n.code,{children:"NetRay:RegisterEvent(eventName: string, options: table?): ServerEvent | ClientEvent"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"Context: Server, Client"}),"\r\nRegisters a new unidirectional event endpoint or retrieves an existing one. Returns the corresponding ",(0,t.jsx)(n.code,{children:"ServerEvent"})," or ",(0,t.jsx)(n.code,{children:"ClientEvent"})," instance."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"eventName"}),": A unique string identifier for the event."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"options"}),": (Optional) A table containing configuration for the event. Common options:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"typeDefinition: table?"}),": Schema for type validation."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"priority: number?"}),": Client processing priority (using ",(0,t.jsx)(n.code,{children:"NetRay.Priority"})," constants). Default ",(0,t.jsx)(n.code,{children:"NORMAL"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"compression: boolean?"}),": Hint to attempt compression."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"batchable: boolean?"}),": Allow server->client batching (default ",(0,t.jsx)(n.code,{children:"true"}),")."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"circuitBreaker: table?"}),": Configuration for a circuit breaker (see CircuitBreaker API)."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"rateLimit: table?"}),": (Server Only - within options) - See ServerManager. ",(0,t.jsx)(n.code,{children:"maxRequests"}),", ",(0,t.jsx)(n.code,{children:"timeWindow"}),", etc."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"netrayregisterrequesteventeventname-string-options-table-requestserver--requestclient",children:(0,t.jsx)(n.code,{children:"NetRay:RegisterRequestEvent(eventName: string, options: table?): RequestServer | RequestClient"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"Context: Server, Client"}),"\r\nRegisters a new bidirectional request/response endpoint or retrieves an existing one. Returns ",(0,t.jsx)(n.code,{children:"RequestServer"})," or ",(0,t.jsx)(n.code,{children:"RequestClient"}),"."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"eventName"}),": A unique string identifier for the request."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"options"}),": (Optional) A table containing configuration. Common options:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"requestTypeDefinition: table?"}),": Schema for the request payload."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"responseTypeDefinition: table?"}),": Schema for the response payload."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"compression: boolean?"}),": Hint to attempt compression."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"timeout: number?"}),": Request timeout in seconds (default 10)."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"circuitBreaker: table?"}),": Configuration for a circuit breaker."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"rateLimit: table?"}),": (Server Only - within options)"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"netrayregistermiddlewarename-string-middlewarefn-function-priority-number",children:(0,t.jsx)(n.code,{children:"NetRay:RegisterMiddleware(name: string, middlewareFn: function, priority: number?)"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"Context: Server, Client"}),"\r\nRegisters a global middleware function that intercepts events and requests."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"name"}),": A unique name for the middleware."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"middlewareFn"}),": The handler function ",(0,t.jsx)(n.code,{children:"(eventName, player, data) -> data | nil | false"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"priority"}),": Execution order (lower runs first, default 100)."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"netraygetcircuitbreakereventname-string-circuitbreaker",children:(0,t.jsx)(n.code,{children:"NetRay:GetCircuitBreaker(eventName: string): CircuitBreaker?"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"Context: Server, Client"}),"\r\nRetrieves the Circuit Breaker instance associated with a registered event or request name, if one was configured. Returns ",(0,t.jsx)(n.code,{children:"nil"})," if no breaker exists for that name."]}),"\n",(0,t.jsx)(n.h3,{id:"netraygeteventeventname-string-clientevent",children:(0,t.jsx)(n.code,{children:"NetRay:GetEvent(eventName: string): ClientEvent"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"Context: Client Only"}),"\r\nConvenience method on the client to get or register a ",(0,t.jsx)(n.code,{children:"ClientEvent"}),". Primarily useful for getting a reference to fire events to the server or listen for events from the server."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>c});var i=r(6540);const t={},s=i.createContext(t);function l(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);