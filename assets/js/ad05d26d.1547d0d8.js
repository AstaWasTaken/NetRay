"use strict";(self.webpackChunknet_ray_docs=self.webpackChunknet_ray_docs||[]).push([[278],{8453:(e,n,r)=>{r.d(n,{R:()=>c,x:()=>o});var t=r(6540);const s={},i=t.createContext(s);function c(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),t.createElement(i.Provider,{value:n},e.children)}},8931:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>c,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"api-reference/requestclient","title":"API Reference - RequestClient","description":"Returned by NetRay:RegisterRequestEvent on the client. Handles the client-side logic for request/response communication, primarily for making requests to the server, but also for handling requests initiated by the server. Uses Promises for asynchronous results.","source":"@site/docs/api-reference/requestclient.md","sourceDirName":"api-reference","slug":"/api-reference/requestclient","permalink":"/NetRay/docs/api-reference/requestclient","draft":false,"unlisted":false,"editUrl":"https://github.com/AstaWasTaken/NetRay/docs/api-reference/requestclient.md","tags":[],"version":"current","frontMatter":{"title":"API Reference - RequestClient"},"sidebar":"docsSidebar","previous":{"title":"API Reference - RequestServer","permalink":"/NetRay/docs/api-reference/requestserver"},"next":{"title":"API Reference - CircuitBreaker","permalink":"/NetRay/docs/api-reference/circuitbreaker"}}');var s=r(4848),i=r(8453);const c={title:"API Reference - RequestClient"},o="API: RequestClient",a={},l=[{value:"Methods",id:"methods",level:2},{value:"<code>:Request(data: any): Promise</code>",id:"requestdata-any-promise",level:3},{value:"<code>:OnRequest(callback: function)</code>",id:"onrequestcallback-function",level:3},{value:"Properties (Internal)",id:"properties-internal",level:2},{value:"Example Usage",id:"example-usage",level:3}];function d(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"api-requestclient",children:"API: RequestClient"})}),"\n",(0,s.jsxs)(n.p,{children:["Returned by ",(0,s.jsx)(n.code,{children:"NetRay:RegisterRequestEvent"})," on the client. Handles the client-side logic for request/response communication, primarily for making requests to the server, but also for handling requests initiated ",(0,s.jsx)(n.em,{children:"by"})," the server. Uses Promises for asynchronous results."]}),"\n",(0,s.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(n.h3,{id:"requestdata-any-promise",children:(0,s.jsx)(n.code,{children:":Request(data: any): Promise"})}),"\n",(0,s.jsxs)(n.p,{children:["Initiates a request ",(0,s.jsx)(n.em,{children:"from"})," this client ",(0,s.jsx)(n.em,{children:"to"})," the server endpoint with the same name."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"data"}),": The data payload to send with the request (validated against the ",(0,s.jsx)(n.em,{children:"server's"})," ",(0,s.jsx)(n.code,{children:"requestTypeDefinition"})," if defined)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Returns"}),": A ",(0,s.jsx)(n.code,{children:"Promise"})," that:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Resolves with the ",(0,s.jsx)(n.code,{children:"response"})," data sent back by the server's ",(0,s.jsx)(n.code,{children:":OnRequest"})," handler (validated against the server's ",(0,s.jsx)(n.code,{children:"responseTypeDefinition"}),")."]}),"\n",(0,s.jsxs)(n.li,{children:["Rejects with an ",(0,s.jsx)(n.code,{children:"errorMessage: string"})," if the server handler ",(0,s.jsx)(n.code,{children:"error()"}),"s, the request times out, the circuit breaker is open, or a network error occurs."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'local getServerTime = NetRay:RegisterRequestEvent("GetServerTime", {\r\n    timeout = 5 -- Wait max 5 seconds\r\n})\r\n\r\nprint("Requesting server time...")\r\ngetServerTime:Request({}) -- Send empty table if no request data needed\r\n    :andThen(function(response)\r\n        -- Assuming server returns { timestamp = 12345.67 }\r\n        print("Server time received:", response.timestamp)\r\n    end)\r\n    :catch(function(err)\r\n        warn("Failed to get server time:", err)\r\n    end)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"onrequestcallback-function",children:(0,s.jsx)(n.code,{children:":OnRequest(callback: function)"})}),"\n",(0,s.jsxs)(n.p,{children:["(Less Common Usage) Registers a handler function that executes when a request is received ",(0,s.jsx)(n.em,{children:"from"})," the server for this endpoint. This function ",(0,s.jsx)(n.strong,{children:"must"})," return a value (the response) or ",(0,s.jsx)(n.code,{children:"error()"})," to reject the server's Promise."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"callback(data: any) -> response: any"})}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"data"}),": The request payload sent by the server. Validated against ",(0,s.jsx)(n.em,{children:"this"})," (client's) ",(0,s.jsx)(n.code,{children:"requestTypeDefinition"})," if defined during client registration."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Return Value"}),": The data to send back as the response to the server. This value is validated against ",(0,s.jsx)(n.em,{children:"this"})," (client's) ",(0,s.jsx)(n.code,{children:"responseTypeDefinition"})," if defined. If the callback ",(0,s.jsx)(n.code,{children:"error()"}),"s, the server's Promise is rejected."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'local promptClientAction = NetRay:RegisterRequestEvent("PromptAction", {\r\n    requestTypeDefinition = { prompt = "string" },\r\n    responseTypeDefinition = { confirmed = "boolean" }\r\n})\r\n\r\npromptClientAction:OnRequest(function(data)\r\n    print("Server requested action:", data.prompt)\r\n    local didConfirm = YourGUIManager:ShowConfirmationPrompt(data.prompt) -- Show UI prompt\r\n    return { confirmed = didConfirm } -- Send response back to server\r\nend)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"properties-internal",children:"Properties (Internal)"}),"\n",(0,s.jsx)(n.p,{children:"Holds references to:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Name"}),": Request name string."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Options"}),": Registration options."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ClientManager"}),": Parent manager instance."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"RemoteFunction"}),": Underlying Roblox ",(0,s.jsx)(n.code,{children:"RemoteFunction"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"example-usage",children:"Example Usage"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Example of client-side request registration\r\nlocal getServerTime = NetRay:RegisterRequestEvent("GetServerTime", {\r\n    timeout = 5 -- Wait max 5 seconds\r\n})\r\n\r\nprint("Requesting server time...")\r\n\r\nlocal success, serverTime = getServerTime:InvokeServer()\r\nif success then\r\n    print("Server time:", serverTime)\r\nelse\r\n    print("Failed to get server time")\r\nend\n'})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);