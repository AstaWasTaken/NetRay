"use strict";(self.webpackChunknet_ray_docs=self.webpackChunknet_ray_docs||[]).push([[749],{2935:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"advanced-features/priorities","title":"Event Priorities","description":"NetRay allows you to assign priorities to events (RegisterEvent), influencing the order in which they are processed on the receiving client. This helps ensure that critical updates are handled promptly, even under high network load, while less important events (like background logging) can be deferred slightly.","source":"@site/docs/advanced-features/priorities.md","sourceDirName":"advanced-features","slug":"/advanced-features/priorities","permalink":"/NetRay/docs/advanced-features/priorities","draft":false,"unlisted":false,"editUrl":"https://github.com/AstaWasTaken/NetRay/docs/advanced-features/priorities.md","tags":[],"version":"current","frontMatter":{"title":"Event Priorities"},"sidebar":"docsSidebar","previous":{"title":"Circuit Breakers","permalink":"/NetRay/docs/advanced-features/circuit-breakers"},"next":{"title":"Optimizations (Batching & Compression)","permalink":"/NetRay/docs/advanced-features/optimizations"}}');var r=t(4848),s=t(8453);const l={title:"Event Priorities"},a="Event Priorities",o={},d=[{value:"Priority Levels",id:"priority-levels",level:2},{value:"Usage",id:"usage",level:2},{value:"Client-Side Processing",id:"client-side-processing",level:2},{value:"When to Use Priorities",id:"when-to-use-priorities",level:2}];function c(e){const i={admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.header,{children:(0,r.jsx)(i.h1,{id:"event-priorities",children:"Event Priorities"})}),"\n",(0,r.jsxs)(i.p,{children:["NetRay allows you to assign priorities to events (",(0,r.jsx)(i.code,{children:"RegisterEvent"}),"), influencing the order in which they are processed on the ",(0,r.jsx)(i.strong,{children:"receiving client"}),". This helps ensure that critical updates are handled promptly, even under high network load, while less important events (like background logging) can be deferred slightly."]}),"\n",(0,r.jsx)(i.admonition,{title:"Client-Side Processing Only",type:"info",children:(0,r.jsxs)(i.p,{children:["Priority affects the ",(0,r.jsx)(i.strong,{children:"client-side processing queue"})," when events are ",(0,r.jsx)(i.em,{children:"received"})," from the server. It does not directly affect the order events are sent by the server or processed when received ",(0,r.jsx)(i.em,{children:"by"})," the server from a client."]})}),"\n",(0,r.jsx)(i.h2,{id:"priority-levels",children:"Priority Levels"}),"\n",(0,r.jsxs)(i.p,{children:["NetRay defines several priority levels available via ",(0,r.jsx)(i.code,{children:"NetRay.Priority"}),":"]}),"\n",(0,r.jsxs)(i.table,{children:[(0,r.jsx)(i.thead,{children:(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.th,{children:"Constant"}),(0,r.jsx)(i.th,{children:"Value"}),(0,r.jsx)(i.th,{children:"Description"})]})}),(0,r.jsxs)(i.tbody,{children:[(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"CRITICAL"})}),(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"0"})}),(0,r.jsx)(i.td,{children:"Highest priority. Processed almost immediately. Use very sparingly."})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"HIGH"})}),(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"1"})}),(0,r.jsx)(i.td,{children:"Important events (e.g., player state changes, crucial UI updates)."})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"NORMAL"})}),(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"2"})}),(0,r.jsx)(i.td,{children:"Default priority for most events (e.g., chat messages, standard actions)."})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"LOW"})}),(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"3"})}),(0,r.jsx)(i.td,{children:"Less important updates (e.g., ambient effects, non-critical stats)."})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"BACKGROUND"})}),(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"4"})}),(0,r.jsx)(i.td,{children:"Lowest priority. Processed when the system has spare capacity (e.g., analytics)."})]})]})]}),"\n",(0,r.jsx)(i.p,{children:"Lower numerical values indicate higher priority."}),"\n",(0,r.jsx)(i.h2,{id:"usage",children:"Usage"}),"\n",(0,r.jsxs)(i.p,{children:["Specify the priority level in the ",(0,r.jsx)(i.code,{children:"options"})," table when registering an event ",(0,r.jsx)(i.strong,{children:"on the server"}),":"]}),"\n",(0,r.jsx)(i.p,{children:"Server Script"}),"\n",(0,r.jsx)(i.p,{children:"Register events with different priorities"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-lua",children:'local criticalHealthUpdate = NetRay:RegisterEvent("CritHealthSync", {\n    priority = NetRay.Priority.CRITICAL,\n    typeDefinition = { targetId="number", health="number" }\n})\n\nlocal playerHealth = NetRay:RegisterEvent("PlayerHealthUpdate", {\n    priority = NetRay.Priority.CRITICAL,\n    typeDefinition = { targetId="number", health="number" }\n})\n\nlocal playerMovement = NetRay:RegisterEvent("PlayerMove", {\n    priority = NetRay.Priority.HIGH,\n    typeDefinition = { position="Vector3", velocity="Vector3" }\n})\n\nlocal ambientSoundEvent = NetRay:RegisterEvent("AmbientSound", {\n    priority = NetRay.Priority.LOW,\n    typeDefinition = { soundId="string", position="Vector3" }\n})\n\nlocal analyticsEvent = NetRay:RegisterEvent("LogAction", {\n    priority = NetRay.Priority.BACKGROUND,\n    typeDefinition = { actionName="string" }\n})\n'})}),"\n",(0,r.jsx)(i.p,{children:"Later, when firing these events..."}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-lua",children:"criticalHealthUpdate:FireClient(player, {...})\nplayerMovement:FireAllClients({...})\nambientSoundEvent:FireFilteredClients(filterFn, {...})\nanalyticsEvent:FireClient(player, {...})\n"})}),"\n",(0,r.jsx)(i.h2,{id:"client-side-processing",children:"Client-Side Processing"}),"\n",(0,r.jsxs)(i.p,{children:["On the client (",(0,r.jsx)(i.code,{children:"ClientManager"}),"), incoming events are placed into different processing queues based on the priority set during their server-side registration. The ",(0,r.jsx)(i.code,{children:"ClientManager"})," processes these queues, giving preference to higher-priority messages:"]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Critical (0):"})," Processed immediately whenever found."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"High (1):"})," A batch is processed frequently."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Normal (2):"})," A smaller batch is processed frequently."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Low (3) / Background (4):"})," Processed less frequently, probabilistically, to avoid starving lower-priority tasks completely while ensuring higher-priority tasks are favored."]}),"\n"]}),"\n",(0,r.jsx)(i.h2,{id:"when-to-use-priorities",children:"When to Use Priorities"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:["Use ",(0,r.jsx)(i.code,{children:"CRITICAL"})," ",(0,r.jsx)(i.em,{children:"only"})," for events that absolutely must be processed with minimal delay, where even a few frames of lag are unacceptable (e.g., immediate hit registration feedback, critical state synchronization failure recovery). Overuse will degrade performance."]}),"\n",(0,r.jsxs)(i.li,{children:["Use ",(0,r.jsx)(i.code,{children:"HIGH"})," for important gameplay events impacting immediate player experience (movement, ability activation feedback, damage notifications)."]}),"\n",(0,r.jsxs)(i.li,{children:["Use ",(0,r.jsx)(i.code,{children:"NORMAL"})," as the default for most standard interactions."]}),"\n",(0,r.jsxs)(i.li,{children:["Use ",(0,r.jsx)(i.code,{children:"LOW"})," for background visual/audio effects or non-essential updates."]}),"\n",(0,r.jsxs)(i.li,{children:["Use ",(0,r.jsx)(i.code,{children:"BACKGROUND"})," for telemetry, analytics, or logging that can be delayed significantly without impacting gameplay."]}),"\n"]}),"\n",(0,r.jsx)(i.admonition,{type:"note",children:(0,r.jsxs)(i.p,{children:["Prioritization helps manage load on the ",(0,r.jsx)(i.em,{children:"client"}),". It does not guarantee network delivery order or reduce absolute latency. Network conditions can still cause events to arrive out of order, although batching might group related events."]})})]})}function h(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,r.jsx)(i,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,i,t)=>{t.d(i,{R:()=>l,x:()=>a});var n=t(6540);const r={},s=n.createContext(r);function l(e){const i=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),n.createElement(s.Provider,{value:i},e.children)}}}]);