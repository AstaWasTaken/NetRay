"use strict";(self.webpackChunknet_ray_docs=self.webpackChunknet_ray_docs||[]).push([[39],{8453:(e,r,n)=>{n.d(r,{R:()=>t,x:()=>l});var c=n(6540);const i={},s=c.createContext(i);function t(e){const r=c.useContext(s);return c.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),c.createElement(s.Provider,{value:r},e.children)}},9075:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>c,toc:()=>a});const c=JSON.parse('{"id":"api-reference/circuitbreaker","title":"API Reference - CircuitBreaker","description":"Provides fault tolerance for network operations associated with specific NetRay Events or Requests. Obtained via NetRay:GetCircuitBreaker(eventName).","source":"@site/docs/api-reference/circuitbreaker.md","sourceDirName":"api-reference","slug":"/api-reference/circuitbreaker","permalink":"/NetRay/docs/api-reference/circuitbreaker","draft":false,"unlisted":false,"editUrl":"https://github.com/AstaWasTaken/NetRay/docs/api-reference/circuitbreaker.md","tags":[],"version":"current","frontMatter":{"title":"API Reference - CircuitBreaker"},"sidebar":"docsSidebar","previous":{"title":"API Reference - RequestClient","permalink":"/NetRay/docs/api-reference/requestclient"}}');var i=n(4848),s=n(8453);const t={title:"API Reference - CircuitBreaker"},l="API: CircuitBreaker",d={},a=[{value:"Properties",id:"properties",level:2},{value:"<code>State: string</code> (Read Only)",id:"state-string-read-only",level:3},{value:"<code>FailureCount: number</code> (Read Only)",id:"failurecount-number-read-only",level:3},{value:"<code>Options: table</code> (Read Only)",id:"options-table-read-only",level:3},{value:"<code>Signals: table</code> (Read Only)",id:"signals-table-read-only",level:3},{value:"Methods",id:"methods",level:2},{value:"<code>:IsAllowed(): boolean</code>",id:"isallowed-boolean",level:3},{value:"<code>:Execute(fn: function, ...args): any | nil</code>",id:"executefn-function-args-any--nil",level:3},{value:"<code>:RecordSuccess()</code>",id:"recordsuccess",level:3},{value:"<code>:RecordFailure()</code>",id:"recordfailure",level:3},{value:"<code>:ForceState(state: string)</code>",id:"forcestatestate-string",level:3},{value:"<code>:GetMetrics(): table</code>",id:"getmetrics-table",level:3}];function o(e){const r={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"api-circuitbreaker",children:"API: CircuitBreaker"})}),"\n",(0,i.jsxs)(r.p,{children:["Provides fault tolerance for network operations associated with specific NetRay Events or Requests. Obtained via ",(0,i.jsx)(r.code,{children:"NetRay:GetCircuitBreaker(eventName)"}),"."]}),"\n",(0,i.jsx)(r.h2,{id:"properties",children:"Properties"}),"\n",(0,i.jsxs)(r.h3,{id:"state-string-read-only",children:[(0,i.jsx)(r.code,{children:"State: string"})," (Read Only)"]}),"\n",(0,i.jsx)(r.p,{children:"The current state of the circuit breaker:"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:'"CLOSED"'}),": Normal operation, requests allowed."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:'"OPEN"'}),": Tripped due to failures, requests blocked (or fallback used)."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:'"HALF_OPEN"'}),": Allowing limited test requests after timeout to check recovery."]}),"\n"]}),"\n",(0,i.jsxs)(r.h3,{id:"failurecount-number-read-only",children:[(0,i.jsx)(r.code,{children:"FailureCount: number"})," (Read Only)"]}),"\n",(0,i.jsxs)(r.p,{children:["The current count of consecutive or recent failures tracked while in the ",(0,i.jsx)(r.code,{children:"CLOSED"})," state. Reset upon success or transition to ",(0,i.jsx)(r.code,{children:"OPEN"}),"."]}),"\n",(0,i.jsxs)(r.h3,{id:"options-table-read-only",children:[(0,i.jsx)(r.code,{children:"Options: table"})," (Read Only)"]}),"\n",(0,i.jsxs)(r.p,{children:["The configuration options table provided during registration (or defaults). Includes ",(0,i.jsx)(r.code,{children:"failureThreshold"}),", ",(0,i.jsx)(r.code,{children:"resetTimeout"}),", ",(0,i.jsx)(r.code,{children:"fallback"}),", etc."]}),"\n",(0,i.jsxs)(r.h3,{id:"signals-table-read-only",children:[(0,i.jsx)(r.code,{children:"Signals: table"})," (Read Only)"]}),"\n",(0,i.jsxs)(r.p,{children:["A table containing ",(0,i.jsx)(r.code,{children:"SignalPlus"})," instances for monitoring:"]}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"StateChanged"}),": Fires when the state transitions. Args: ",(0,i.jsx)(r.code,{children:"(oldState: string, newState: string)"})]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"FailureRecorded"}),": Fires each time ",(0,i.jsx)(r.code,{children:":RecordFailure()"})," is called internally. Args: ",(0,i.jsx)(r.code,{children:"()"})]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"SuccessRecorded"}),": Fires each time ",(0,i.jsx)(r.code,{children:":RecordSuccess()"})," is called internally. Args: ",(0,i.jsx)(r.code,{children:"()"})]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"Recovered"}),": Fires when transitioning from ",(0,i.jsx)(r.code,{children:"HALF_OPEN"})," back to ",(0,i.jsx)(r.code,{children:"CLOSED"}),". Args: ",(0,i.jsx)(r.code,{children:"(recoveryTime: number)"})]}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"methods",children:"Methods"}),"\n",(0,i.jsx)(r.h3,{id:"isallowed-boolean",children:(0,i.jsx)(r.code,{children:":IsAllowed(): boolean"})}),"\n",(0,i.jsx)(r.p,{children:"Checks if a request should be allowed based on the current state."}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["Returns ",(0,i.jsx)(r.code,{children:"true"})," if state is ",(0,i.jsx)(r.code,{children:"CLOSED"}),"."]}),"\n",(0,i.jsxs)(r.li,{children:["Returns ",(0,i.jsx)(r.code,{children:"true"})," if state is ",(0,i.jsx)(r.code,{children:"HALF_OPEN"})," and ",(0,i.jsx)(r.code,{children:"HalfOpenRequestCount < Options.halfOpenMaxRequests"}),"."]}),"\n",(0,i.jsxs)(r.li,{children:["Returns ",(0,i.jsx)(r.code,{children:"false"})," if state is ",(0,i.jsx)(r.code,{children:"OPEN"})," and the timeout hasn't expired."]}),"\n",(0,i.jsxs)(r.li,{children:["Returns ",(0,i.jsx)(r.code,{children:"false"})," if state is ",(0,i.jsx)(r.code,{children:"HALF_OPEN"})," and the request limit has been reached."]}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.em,{children:"(May transition OPEN -> HALF_OPEN internally if timeout expired)"})}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"executefn-function-args-any--nil",children:(0,i.jsx)(r.code,{children:":Execute(fn: function, ...args): any | nil"})}),"\n",(0,i.jsx)(r.p,{children:"Wraps a function call with circuit breaker protection. Use this if you want the breaker to automatically record success/failure based on the function's execution."}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["If allowed, calls ",(0,i.jsx)(r.code,{children:"fn(...args)"}),".","\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["If ",(0,i.jsx)(r.code,{children:"fn"})," executes successfully, calls ",(0,i.jsx)(r.code,{children:":RecordSuccess()"})," and returns the result."]}),"\n",(0,i.jsxs)(r.li,{children:["If ",(0,i.jsx)(r.code,{children:"fn"})," throws an error, calls ",(0,i.jsx)(r.code,{children:":RecordFailure()"})," and either re-throws the error or returns the result of the configured ",(0,i.jsx)(r.code,{children:"fallback"})," function (if any)."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(r.li,{children:["If not allowed (",(0,i.jsx)(r.code,{children:":IsAllowed()"})," is false), immediately calls the ",(0,i.jsx)(r.code,{children:"fallback"}),' function (if configured) and returns its result, otherwise throws a "Circuit breaker is open" error.']}),"\n"]}),"\n",(0,i.jsx)(r.p,{children:"Example:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-lua",children:'local cb = NetRay:GetCircuitBreaker("MyRequest")\r\nlocal function makeApiCall(param)\r\n    -- Simulate API call that might fail\r\n    if math.random() < 0.3 then error("API Failed") end\r\n    return "API Success: " .. param\r\nend\r\n\r\n-- Protected call\r\nlocal ok, result = pcall(cb.Execute, cb, makeApiCall, "TestData") -- Use pcall to catch fallback errors too\r\nif ok then\r\n    print("Result:", result) -- Might be API success or fallback value\r\nelse\r\n    warn("Execution failed or breaker open with no fallback:", result)\r\nend\n'})}),"\n",(0,i.jsx)(r.h3,{id:"recordsuccess",children:(0,i.jsx)(r.code,{children:":RecordSuccess()"})}),"\n",(0,i.jsxs)(r.p,{children:["Manually informs the breaker that an operation succeeded. If in ",(0,i.jsx)(r.code,{children:"HALF_OPEN"})," state, increments consecutive success count, potentially closing the circuit. If in ",(0,i.jsx)(r.code,{children:"CLOSED"})," state, resets ",(0,i.jsx)(r.code,{children:"FailureCount"}),". Typically called internally by NetRay or ",(0,i.jsx)(r.code,{children:":Execute()"}),"."]}),"\n",(0,i.jsx)(r.h3,{id:"recordfailure",children:(0,i.jsx)(r.code,{children:":RecordFailure()"})}),"\n",(0,i.jsxs)(r.p,{children:["Manually informs the breaker that an operation failed. If in ",(0,i.jsx)(r.code,{children:"CLOSED"})," state, increments ",(0,i.jsx)(r.code,{children:"FailureCount"}),", potentially tripping to ",(0,i.jsx)(r.code,{children:"OPEN"}),". If in ",(0,i.jsx)(r.code,{children:"HALF_OPEN"})," state, immediately trips back to ",(0,i.jsx)(r.code,{children:"OPEN"})," (possibly with increased timeout). Typically called internally by NetRay or ",(0,i.jsx)(r.code,{children:":Execute()"}),"."]}),"\n",(0,i.jsx)(r.h3,{id:"forcestatestate-string",children:(0,i.jsx)(r.code,{children:":ForceState(state: string)"})}),"\n",(0,i.jsx)(r.p,{children:"Manually sets the circuit breaker's state. Useful for testing or administrative actions."}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"state"}),": Must be one of ",(0,i.jsx)(r.code,{children:'"CLOSED"'}),", ",(0,i.jsx)(r.code,{children:'"OPEN"'}),", ",(0,i.jsx)(r.code,{children:'"HALF_OPEN"'}),". (Use ",(0,i.jsx)(r.code,{children:"CircuitBreaker.State.X"})," constants if available/exposed)."]}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"getmetrics-table",children:(0,i.jsx)(r.code,{children:":GetMetrics(): table"})}),"\n",(0,i.jsxs)(r.p,{children:["Returns a table containing various performance and state metrics for the circuit breaker instance, such as ",(0,i.jsx)(r.code,{children:"totalFailures"}),", ",(0,i.jsx)(r.code,{children:"totalSuccesses"}),", ",(0,i.jsx)(r.code,{children:"openCount"}),", ",(0,i.jsx)(r.code,{children:"averageRecoveryTime"}),", ",(0,i.jsx)(r.code,{children:"currentState"}),", etc."]})]})}function h(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}}}]);